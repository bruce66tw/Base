using System;
using System.Collections.Generic;
using Base.Models;
using System.Linq.Expressions;
using System.Web.Mvc;   //必須using MVC
using Base.Services;
using BaseWeb.Services;

namespace BaseWeb.Helpers
{
    /// <summary>
    /// 單選下拉式欄位, 包含多欄位, 選取時顯示不同的內容(title欄位)
    /// </summary>
    public static class XiSelect2Helper
    {
        /// <summary>
        /// 下拉式欄位, 使用 bootstrap-select
        /// </summary>
        /// <param name="htmlHelper"></param>
        /// <param name="fid">欄位 id</param>
        /// <param name="value">欄位 value</param>
        /// <param name="rows">data source</param>
        /// <returns></returns>
        public static IHtmlContent XiSelect2(this IHtmlHelper htmlHelper, string fid, string value, List<IdStrExtModel> rows, Select2PropModel prop = null)
        {
            return GetStr(fid, value, rows, prop);
        }

        public static IHtmlContent XiSelect2For<TModel, TProperty>(this IHtmlHelper<TModel> htmlHelper, Expression<Func<TModel, TProperty>> expression, List<IdStrExtModel> rows, Select2PropModel prop = null)
        {
            //讀取欄位 id
            var metadata = ModelMetadata.FromLambdaExpression(expression, htmlHelper.ViewData);
            var fid = metadata.PropertyName;
            var value = metadata.Model != null ? metadata.Model.ToString() : "";
            return GetStr(fid, value, rows, prop);
        }

        private static IHtmlContent GetStr(string fid, string value, List<IdStrExtModel> rows, Select2PropModel prop = null)
        {
            //單選
            var list = "";
            var htmlRow = "<option title='{3}' value='{0}' {2}>{1}</option>";

            //單欄位時, 加上第一筆空白選項的資料
            //if (prop != null && prop.Columns <= 1)
            //{
            //    var item1 = (prop.PlaceHolder != "") ? prop.PlaceHolder : _Fun.Select;
            //    list += String.Format(htmlRow, "", item1, "");
            //}

            //加上第一筆空白選項的資料, 設定空白列title='' 才會顯示 placeHolder內容 !!
            //if (prop != null && prop.Columns <= 1)
            if (prop == null || prop.AddEmptyRow)
                list += String.Format(htmlRow, "", _Fun.SelectText, "","");

            for (var i = 0; i < rows.Count; i++)
            {
                var selected = (value == rows[i].Id) ? "selected" : "";
                list += String.Format(htmlRow, rows[i].Id, rows[i].Str, selected, rows[i].Ext);
            }

            //寬度必須為 data-width='100%' 才會有 RWD效果 !!
            //用class來控制多欄位 !!
            //xg-select-col 用來設定dropdown內框width=100%, xg-select-colX 用來設定RWD寬度
            //會顯示紅色錯誤框的element 必須在 error label 上面且相鄰 !!
            var html = @"
<div style='width:100%'>
    <select id='{0}' name='{0}' {4}>
        {1}
    </select>
    <span id='{2}' class='{3}'></span>
</div>
";
            //get select property string
            var prop2 = _Helper.GetSelectProp(prop);

            html = String.Format(html, fid, list, fid + _WebFun.ErrTail, _WebFun.ErrLabCls, prop2);
            return new HtmlString(html);
        } 

    }
}
