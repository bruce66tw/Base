using BaseWeb.Models;
using BaseWeb.Services;
using System;
using System.Linq.Expressions;
using System.Web.Mvc;

namespace BaseWeb.Helpers
{
    /// <summary>
    /// for single row only
    /// </summary>
    public static class XiFileHelper
    {
        /// <summary>
        /// file upload
        /// </summary>
        /// <param name="helper"></param>
        /// <param name="fid"></param>
        /// <param name="linkUrl"></param>
        /// <param name="title"></param>
        /// <param name="fileType"></param>
        /// <param name="cols"></param>
        /// <param name="labelCols"></param>
        /// <returns></returns>
        /// string value = "", string title = "", int maxLen = 0, bool required = false, int inputCols = 10, PropTextDto prop = null
        public static IHtmlContent XiFile(this IHtmlHelper helper, string fid, string linkUrl = "", string linkText = "", string title = "", bool required = false, int inputCols = 10, PropFileModel prop = null)
        {
            return GetStr(fid, linkUrl, linkText, title, required, inputCols, prop);
        }

        public static IHtmlContent XiFileFor<TModel, TProperty>(this IHtmlHelper<TModel> helper, Expression<Func<TModel, TProperty>> expression, string linkText = "", string title = "", bool required = false, int inputCols = 10, PropFileModel prop = null)
        {
            _Helper.GetMetaValue(out string fid, out string value, expression, helper.ViewData);
            return GetStr(fid, value, linkText, title, required, inputCols, prop);
        }

        public static IHtmlContent GetStr(string fid, string linkUrl, string linkText, string title, bool required, int inputCols, PropFileModel prop)
        {
            /*
            //label onlly show file name
            var fileName = "";
            var pos = linkUrl.LastIndexOf('/');
            if (pos > 0)
                fileName = linkUrl.Substring(pos + 1);
            */

            if (prop == null)
                prop = new PropFileModel();

            var attr = _Helper.GetBaseProp(fid, "", prop);
            //var extClass = "";
            //var titleCols = 2;
            //if (prop != null)
            //{
                //titleCols = prop.TitleCols;
                if (prop.ExtClass != "")
                    attr += " class='" + prop.ExtClass + "'";
            //}

            //when error, red border include up/down component
            //class is xd-xxxx(xxxx is id)
            //also set label class, for easy to access
            //xd-xxx-box: show red border when error
            var showLink = (linkUrl == "") ? " style='display:none'" : "";
            var data = string.Format("data-fun='' data-id='{0}' data-max='{1}' data-exts='{2}'", fid, prop.MaxSize, prop.FileExts);
            var html = string.Format(@"
<div style='width:100%; text-align:left; margin-bottom:10px;'>
    <div class='xg-file-box xd-{0}-box'>
        <div{1}>
            <a href='{2}' class='xd-{0}-url' target='_blank'>{3}</a>
            <a onclick='javascript:_iFile.onClickDelete(\'{0}\');'>
                <i class='icon-times'></i>
            </a>
        </div>
        <input type='file' {4} onchange='_iFile.onChangeFile(this)'{5}>
        <div>{6}</div>
    </div>
    <span data-id2='{7}' class='{8}'></span>
</div>
", fid, showLink, linkUrl, linkText, data, attr, prop.Note, fid + _WebFun.ErrTail, _WebFun.ErrLabCls);

            /*
            var html = string.Format(@"
<span class='xd-{0}-label'{3}>
    <a href='{2}' target='_blank'>{1}</a>
    <input type='button' onclick='_xp.onClickDeleteFile(&quot;{0}&quot;)' style='padding:0;font-size:small;line-height:normal' value='刪除'>
</span>
<input type='file' class='xd-{0}' data-fun='' onchange='_xp.onChangeFile(&quot;{0}&quot; , this)'>
<span class='required'>{4}</span>
", id, fileName, value, show, hint2);
            */

            //add label if need
            if (title != "")
            {
                if (inputCols <= 0)
                    inputCols = 10;
                var required2 = required ? "<span class='xg-required'>*</span>" : "";
                html = string.Format(@"
<div class='row xg-row'>
    <div class='col-md-{1} col-sm-12 xg-label'>{3}{4}</div>
    <div class='col-md-{2} col-sm-12 xg-input'>
        {0}
    </div>
</div>
", html, 12 - inputCols, inputCols, title, required2);
            }

            return new HtmlString(html);
        }

    } //class
}
